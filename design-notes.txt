		  parrot - make a script with python

This code is based on the python I used for Buffy Season 2, hopefully
with some enhancements, and also with changes to cope with the
differences in the HTML used to typeset the Season 6 scripts.

The initial git checkin is frob.py from Buffy Season 2, and I've
slowly added things to it - at some point I'll throw away the old
functions. 

Current State:

* ord_list() returns the correctly-ordered paths to each episode's HTML
* first_pass(x) returns the title of x (which should be a path), and
will also return a list of probably-parts
* make_lines(f) splits f (to EOF) into "lines", i.e. ignoring \n and
instead breaking where there is <{p,P,br,BR}>
* guess_parts(lines) looks for parts (identified by being all-upper-case
strings before : in a line
* get_castlist(): calls first_pass on each episode in turn, generates
a list of each episode, in turn being a title,cast tuple. Writes out a
master cast-list file (contains each part only once). Currently
disabled, so we can start working on the casting itself.
*gen_partarrays(): creates Part objects for every part, and produces
three arrays of parts. Also pickles these to disk
*get_partarrays(): either loads the pickles, or calls gen_partarrays()
*fix_parts(): this applys some fixes to the members of the allparts
and partsbyep arrays, and then re-saves the new Pickle. We'll need to
comment out fixes once applied, to avoid attempted
multiple-applications.
*load_cast(): parses casting.txt, working out a cast for each episode
*showep(e): shows the cast for episode e
*showperson(who): shows the parts for "who"
*unused(): gives an episode count for those not in every episode thusfar
*writecast(): writes out a by-person and by-episode cast list
*preamble(e): prepares the .tex file (preamble and suchlike), returns 3
fds: the html to read, the tex and cast tex files to write.
*htmltotex(e): function that produces a .tex file (and cast .tex) for
episode e: PARTIALLY DONE
*texcast(d): adds an entry to each element in d (which is a
dictionary, specifically an member of the cast dictionary) which is
the LaTeX command to typeset it.
*castcommands(f,d): outputs a set of LaTeX macros to f that provide
bold upper-case commands for each part

"Nobody" is a special-case casting for parts that we aren't going to
need (e.g. because they appear in flashbacks). We'll need to
incorporate this elsewhere in due course.

Class Part:
 contains a list of appearances, whether this is really multiple parts
 (e.g. vampire 1), whether this is a real part or e.g. a voiceover

Class EpCount:
 excends tuple - lets you sort by x[0], which should be an int.

Parts:

We need to know which parts are different in each episode
(e.g. vampires), and which are common either across the series or in
linked episodes (which is essentially 1+2 and 21+22)

Also, we need 3 forms of each part:
i) cast-list form (e.g. Ms. Lefcort)
ii) this is their line form (e.g. MS. LEFCORT)
iii) LaTeX-safe-command-name form (e.g. MSLEFCORT)

...and to know which parts don't appear in the cast-list (e.g. Giles
voice-over) 
