		  parrot - make a script with python

This code is based on the python I used for Buffy Season 2, hopefully
with some enhancements, and also with changes to cope with the
differences in the HTML used to typeset the Season 6 scripts. The
final version of the season 6 code (as used) was tagged "BuffyS6", so
could be gone back to at any point. Similarly, the final version of
the s5 code was tagged "BuffyS5".

All the buffyology scripts are stored in
buffyology_all_episodes.tar.bz2 
You can extract a season to the current directory using a rune like:
tar --wildcards --strip-components=1 -xjvf ../../buffyology_all_episodes.tar.bz2 '*-7-*'

*e-reader output*
The PDFs that result from pdflatex aren't that easy on the eye on a
kindle (and presumably other similar devices), so conversion to
e.g. .mobi may be desirable. To do this:
i) install calibre (at the time of writing, dubious security-wise, so
best to remove when done)
ii) use the ebook-convert code:
for i in *.pdf; do ebook-convert "$i" "${i/pdf/mobi}"; done

pandoc (version in wheezy) can produce ebook formats from TeX, but is
very stupid, so something will have to expand all our macros.

The initial git checkin was frob.py from Buffy Season 2, and I've
slowly added things to it - as old bits have become clearly obsolete,
I've removed them.

At the point I moved onto season 5, I created a season5 branch, to
which all the Season-5 work will be committed.

Workflow:

First, call get_castlist() to guess the parts from each episode, and
produce a casting.txt file. Check that looks sane, and if not, go back
and look at guess_parts/first_pass et al

Then write a fix_parts() function (if necessary) to tidy up the parts
list somewhat; this should edit entries in allparts (that fixes up the
references in the partsbyep array automatically). If you want to
re-generate the cast lists, do fix_parts(newcast=True)

Then for each episode, you have to do htmltotex(e). If you later want
to update the cast table, you can do casttable(e,force=True)

While casting, showep(e) and showperson(who) are useful tools. Then
use writecast() to output the casting by person and episode

* S7 Notes*

The first gets scripted as the person-its-being. There's no easy way
to deal with this, but e.g. everyone who we know is dead at this point
could be turned into First-As-Foo

It might be nice to have a file (for re-use haha) that defines parts
that are repeats (Buffy etc) and ones that never are (cop etc) and
mappings between parts (cop #1 -> cop#1).

The current design assumes that X/Y parts are multiple people
speaking, and therefore not real parts. We need to handle X/FIRST and
THE FIRST/X. Also WILLOW/WARREN

Since we're starting on the scripts earlier, it would be useful to
have a way of updating the cast list without destroying our work on
the script. Do this by creating another file(!) epXX_casttable.tex

* S7 Hacks *

ep4 had one duff line (<i>That</i> lame demon?<br />); edit by hand.
ep5 had one duff line (Note: All sung lyrics are indicated by the symbol.<br />
); remove by hand. Ep22 has a couple of tricky lines "Welcome to
Sunndale" is not within a <p>; edit by hand.

*FAIL*

No place like home (5) and Fool for love (7) are typeset differently
(and, indeed, not even like each other) - text files from
buffy-vs-angel.com may be easier to special-case? They're HTML too,
and not too useful.

Buffyology.com looks like it might well have a more standardised HTML
format; try that, in a buffyology branch

Create a new state directory to put things like allparts.dat in

casting.txt has been edited to include NS roles and the like

showep et al have a bug that they infer the list of people invited
from casting.txt, so if someone has no parts at all, they don't show
up in the list of people uncast in a particular episode.

Bugs:

e.g. "SPIKE, and" ends up as "\SPIKE,~ ", which is wrong; the regexp
for part-name-followed-by-punctuation needs fixing. I think this is fixed.
The odd <i>foo</i> in mid-stage-direction gets missed

Current State:

-updated for buffyology-

* ord_list() returns the correctly-ordered paths to each episode's HTML
* first_pass(x) returns the title of x (which should be a path), and
will also return a list of probably-parts. Calls the following function:
*** guess_parts(f) looks for parts, which are block-capitals in h4 tags
* get_castlist(): calls first_pass on each episode in turn, generates
a list of each episode, in turn being a title,cast tuple. Writes out a
master cast-list file (contains each part only once). Also outputs
verbosecasting.txt, which contains the full cast list for every
episode. Calls the following two functions:
***gen_partarrays(): creates Part objects for every part, and produces
three arrays of parts. Also pickles these to disk
***get_partarrays(): either loads the pickles, or calls gen_partarrays()
*load_cast(): parses casting.txt, working out a cast for each episode
*writecast(): writes out a by-person and by-episode cast list
*showep(e): shows the cast for episode e
*showperson(who): shows the parts for "who"
*unused(): gives an episode count for those not in every episode thusfar
*htmltotex(e): function that produces a .tex file (and cast .tex) for
episode e. Calls get_partarrays, and the following functions:
****preamble(e): prepares the .tex file (preamble and suchlike), returns 3
fds: the html to read, the tex and cast tex files to write.
****texcast(d): adds an entry to each element in d (which is a
dictionary, specifically an member of the cast dictionary) which is
the LaTeX command to typeset it.
****castcommands(f,d): outputs a set of LaTeX macros to f that provide
bold upper-case commands for each part
***casttable(f,d): output a LaTeX cast list
* make_lines(f) splits f (to EOF) into "lines"
*second_pass(fh,ft,epcast,pbe,allparts): actually does the work of
outputting a .tex file, using make_lines and the casting arrays to
highlight actions, stage directions, and so on.
*writecastchanges(): outputs a list of casting changes from when
 casting.txt was written to what's actually in the LaTeX scripts. Calls:
** castchanges(e): outputs the changes in casting to episode e. Calls:
*** readtexcast(path): parses the casting table in a LaTeX script

*Script cheats*

A few(?) edits where the HTML is too mangled.
081-5-03-replacement.html

-not yet updated-

*fix_parts(): this applys some fixes to the members of the allparts
and partsbyep arrays, and then re-saves the new Pickle. We'll need to
comment out fixes once applied, to avoid attempted
multiple-applications.

"Nobody" is a special-case casting for parts that we aren't going to
need (e.g. because they appear in flashbacks). We'll need to
incorporate this elsewhere in due course.

Class Part:
 contains a list of appearances, whether this is really multiple parts
 (e.g. vampire 1), whether this is a real part or e.g. a voiceover

Class EpCount:
 excends tuple - lets you sort by x[0], which should be an int.

Caveats:

it doesn't deal with some tags (I had to edit episode 13 by hand to
fix it).

Parts:

We need to know which parts are different in each episode
(e.g. vampires), and which are common either across the series or in
linked episodes (which is essentially 1+2 and 21+22)

Also, we need 3 forms of each part:
i) cast-list form (e.g. Ms. Lefcort)
ii) this is their line form (e.g. MS. LEFCORT)
iii) LaTeX-safe-command-name form (e.g. MSLEFCORT)

...and to know which parts don't appear in the cast-list (e.g. Giles
voice-over) 
